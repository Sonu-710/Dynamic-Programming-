//Memoziation
//Time Compexity : O(N*N)
//Space Compexity : O(N*N) + O(N)

class Solution {
    public int numDistinct(String s, String t) {
        int[][] dp=new int[s.length()][t.length()];
        for(int[] row:dp)
        Arrays.fill(row,-1);
        return distinctSub(s.length()-1,t.length()-1,s,t,dp);
    }
    static int distinctSub(int i,int j,String s,String t,int[][] dp)
    {
        if(j==-1)
        return 1;
        if(i==-1)
        return 0;
        if(dp[i][j]==-1)
        {
            if(s.charAt(i)==t.charAt(j))
            dp[i][j]=distinctSub(i-1,j-1,s,t,dp)+distinctSub(i-1,j,s,t,dp);
            else
            dp[i][j]=distinctSub(i-1,j,s,t,dp);
        }
        return dp[i][j];
    }
}

//Tabulation
//Time Compexity : O(N*N)
//Space Compexity : O(N*N)

class Solution {
    public int numDistinct(String s, String t) {
        int[][] dp=new int[s.length()+1][t.length()+1];
        for(int i=0;i<s.length();i++)
        dp[i][0]=1;
        for(int i=1;i<=s.length();i++)
        {
            for(int j=1;j<=t.length();j++)
            {
                if(s.charAt(i-1)==t.charAt(j-1))
                dp[i][j]=dp[i-1][j]+dp[i-1][j-1];
                else
                dp[i][j]=dp[i-1][j];
            }
        }
        return dp[s.length()][t.length()];
    }    
}
