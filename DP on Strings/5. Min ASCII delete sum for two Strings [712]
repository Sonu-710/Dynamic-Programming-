//Memoization
//Time Complexity : O(S1+S2) + O(S1*S2)
//Space Compexity : O(S1*S2) + O(S1+S2)

class Solution {
    public int minimumDeleteSum(String s1, String s2) {
        int[][] dp=new int[s1.length()][s2.length()];
        for(int[] row:dp)
        Arrays.fill(row,-1);
        long sum=0;
        for(int i=0;i<s1.length();i++)
        sum=sum+(int)s1.charAt(i);
        for(int i=0;i<s2.length();i++)
        sum=sum+(int)s2.charAt(i);
        return (int)(sum-2*max(s1,s2,0,0,dp));
    }
    static int max(String s1,String s2,int i,int j,int[][] dp)
    {
        if(i==s1.length() || j==s2.length())
        return 0;
        if(dp[i][j]==-1)
        {
            int skip=Math.max(max(s1,s2,i+1,j,dp),max(s1,s2,i,j+1,dp));
            int pick=0;
            if(s1.charAt(i)==s2.charAt(j))
            pick=(int)s1.charAt(i)+max(s1,s2,i+1,j+1,dp);
            dp[i][j]=Math.max(skip,pick);
        }
        return dp[i][j];
    }
}

//Tabulation
//Time Complexity : O(S1+S2) + O(S1*S2)
//Space Compexity : O(S1*S2)


class Solution {
    public int minimumDeleteSum(String s1, String s2) {
        int[][] dp=new int[s1.length()+1][s2.length()+1];
        long sum=0;
        for(int i=0;i<s1.length();i++)
        sum=sum+(int)s1.charAt(i);
        for(int i=0;i<s2.length();i++)
        sum=sum+(int)s2.charAt(i);


        for(int i=s1.length()-1;i>=0;i--)
        {
            for(int j=s2.length()-1;j>=0;j--)
            {
                int skip=Math.max(dp[i][j+1],dp[i+1][j]);
                int pick=0;
                if(s1.charAt(i)==s2.charAt(j))
                pick=(int)s1.charAt(i)+dp[i+1][j+1];
                dp[i][j]=Math.max(pick,skip);
            }
        }
        return (int)(sum-2*dp[0][0]);
    }
}
